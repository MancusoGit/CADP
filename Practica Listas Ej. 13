program ReticuloEndoplasmatico;
type
    r = 1..4;

    usuario = record 
        email : string;
        rol : r;
        revista : string;
        cantDias : integer;
    end;
    
    usuarios = array [1..3600] of usuario;
    
    vectorContadorRoles = array[r] of integer;
    
    listaU = ^nodo;
    
    nodo = record
        user : usuario;
        sig : listaU;
    end;


//modulos
    procedure leerUsuario(var u : usuario);
    begin
        write('ingrese el email del usuario: ');
        readln(u.email);
        write('ingrese el rol del usuario (1-4): ');
        readln(u.rol);
        write('ingrese el nombre de la revista en la que participa el usuario: ');
        readln(u.revista);
        write('ingrese la cantidad de dias desde el ultimo ingreso : ');
        readln(u.cantDias);
    end;

    procedure cargarVectorUsers(var vu : usuarios);
    var
        u : usuario;
        i : integer;
    begin
        for i := 1 to 3600 do begin
            leerUsuario(u);
            vu[i] := u;
        end;
    end;
    
    procedure inicializarVectorContador(var vc : vectorContadorRoles);
    var
        i : integer;
    begin
        for i := 1 to 4 do begin
            vc[i] := 0;
        end;
    end;
    
    procedure insertarOrdenado(var l : listaU; u : usuario);
    var
        nue,act,ant : listaU;
    begin
        new(nue);
        nue^.user := u;
        act := l;
        ant := l;
        while (act <> nil) and (u.cantDias > act^.user.cantDias) do begin
            ant := act;
            act := act^.sig;
        end;
        if (act = ant) then begin
            l := nue;
        end
        else 
            ant^.sig := nue;
        nue^.sig := act;
    end;
    
    procedure noIngresanMax(u : usuario; var maxDias1, maxDias2 : integer; var emailMax1, emailMax2 : string);
    begin
        if (u.cantDias > maxDias1) then begin
            maxDias2 := maxDias1;
            emailMax2 := emailMax1;
            maxDias1 := u.cantDias;
            emailMax1 := u.email;
        end
        else if (u.cantDias > maxDias2) then begin
            maxDias2 := u.cantDias;
            emailMax2 := u.email;
        end;
    end;
        


    procedure cargarListaOrdenada(vu : usuarios ; var l : listaU; var vc : vectorContadorRoles; var emailMax1, emailMax2 : string);
    var
        i, maxDias1, maxDias2 : integer;
    begin
        maxDias1 := -1;
        maxDias2 := -1;
        inicializarVectorContador(vc);
        for i := 1 to 3600 do begin
            if(vu[i].revista = 'Econ√≥mica') then begin
                insertarOrdenado(l,vu[i]);
            end;
            vc[vu[i].rol] := vc[vu[i].rol] + 1;
            noIngresanMax(vu[i],maxDias1,maxDias2,emailMax1,emailMax2);
        end;
    end;
    
    procedure informarUsuarios(l : listaU; vc : vectorContadorRoles; emailMax1, emailMax2 : string);
    var
        i : integer;
    begin
        while (l <> nil) do begin  //a. informar usuario y dias sin entrar al portal.
            writeln('el usuario con email : ',l^.user.email,' lleva ',l^.user.cantDias,' sin entrar al portal de la revista ',l^.user.revista);
            l := l^.sig;
        end;
        for i := 1 to 4 do begin //b. informar cant usuarios por rol
                writeln('la cantidad de usuarios del rol (',i,') es : ',vc[i]);
        end;
        //c. informar 
        writeln('los email de 2 usuarios que hace mas tiempo que no entran al portal son : ');
        writeln(emailMax1);
        writeln(emailMax2);
    end;
    
    
    
var
    users : usuarios;
    roles : vectorContadorRoles;
    pri : listaU;
    emailMax1, emailMax2 : string;
begin
    cargarVectorUsers(users); //se dispone
    pri := nil;
    cargarListaOrdenada(users,pri,roles,emailMax1, emailMax2);
    informarUsuarios(pri,roles,emailMax1, emailMax2);
end.
